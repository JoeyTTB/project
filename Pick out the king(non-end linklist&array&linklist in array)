typedef struct Node{
	int data;
	struct Node* next;
}node;

int main() {
	int n = 0, m = 0, i = 0, ans[100] = { }, count = 0;//ans存放答案，count表示答案下标,n猴子个数,m数到第几个
	node* head = NULL, * tail = NULL, * p = NULL, * q = NULL;//q,p用来对链表进行修改
	head = (node*)malloc(sizeof(node));
	head->data = -1;
	head->next = NULL;//对头进行处理
	while (1) {
		scanf("%d%d",&n,&m);
		if (n == 0 || m == 0) {
			free(head);
			break;
		}
		else {
			tail = head;
			for (i = 0; i < n; i++) {
				p = (node*)malloc(sizeof(node));
				p->data = i + 1;
				tail->next = p;
				p->next = head->next;
				tail = p;
			}
			p = head->next, q = tail, i = 1;//没及时发现的bug:p不指向头，而是第一个元素
			while (q != p) {//若p==q,则说明循环链表中只有一个节点,一个循环过后指向第一个节点(不是头)
				if (i == m) {//q总在p前
					q->next = q->next->next;
					free(p);
					p = q->next;
					i = 1;
				}
				else {
					q = p;
					p = p->next;
					i++;
				}
			}
			ans[count++] = p->data;
			free(p);
			head->next = NULL;
		}
	}
	for (i = 0; i < count; i++) {
		printf("%d\n", ans[i]);
	}
	return 0;
}

//The Second method:用数组实现:>

int main() {
	int n = 0, m = 0, pos = 0, i = 0, arr[100] = { 0 }, count = 1, ans[100] = { 0 }, num = 0;
	while (scanf("%d%d", &n, &m)) {
		if (n == 0 || m == 0)
			break;
		else {
			for (int j = 0; j < n; j++) {
				arr[j] = j + 1;
			}
			num = n;
		}
		while (num > 1) {
			if (arr[pos] != 0) {
				if (count != m) {
					pos = (pos + 1) % n;//对下标取模运算，使下标变动的范围锁定在[0,n-1]
					count++;
				}
				else {
					arr[pos] = 0;
					pos = (pos + 1) % n;
					count = 1;
					while (arr[pos] == 0) {
						pos = (pos + 1) % n;
					}
					num--;//num==1时,arr[pos]可能是空值(0)
				}
			}
			else {
				pos = (pos + 1) % n;
			}
		}
		ans[i++] = arr[pos];
		pos = 0;
	}
	for (int a = 0; a < i; a++) {
		printf("%d\n",ans[a]);
	}
	return 0;
}

//用数组链表的方式：

//可以把下标理解为链表中的指针，下标对应的数值为链表中指针指向的下一个有效节点，其中最后一个节点的数值应是最小下标0(创建时)

int main() {
	int n = 0, m = 0, i = 0, j = 0, p = 0, q = 0, num = 0, count = 1, ans[100] = { 0 }, arr[100] = { 0 };
	while (scanf("%d%d", &n, &m)) {
		if (n == 0 || m == 0)
			break;
		else {
			for (i = 0; i < n - 1; i++) {
				arr[i] = i + 1;
			}
			arr[i] = 0, q = i, p = 0, num = n;
			while (num > 1) {       //这里有两种写法，也可以是 q ! = p
				if (count != m) {
					q = p;
					p = arr[p];    //下标+1是编号，下标对应的数值类似循环链表写法的前后指针
					count++;       //将q/p数值赋值对应的数组数值，因为数组中的数值比下标大1，可完成位移的操作
				}
				else {
					arr[q] = arr[p];  //保存p点下一节点的位置
					arr[p] = -1;      //清楚p指向的节点
					p = arr[q];       //p指向q指向的下一个有效节点
					count = 1;
					num--;
				}
			}
			ans[j++] = q + 1;
		}
	}
	for (i = 0; i < j; i++) {
		printf("%d\n",ans[i]);
	}
	return 0;
}
