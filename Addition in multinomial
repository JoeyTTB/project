typedef struct Node {
	int coefficient;
	int index;
	struct Node* next;
}node;
bool is_first = true, is_negative = false;

void Print(node* p) {
	while (p != NULL) {
		p->coefficient > 0 ? is_negative = false : is_negative = true;
		if (is_first && p->index > 1) {
			printf("%dX^%d", p->coefficient, p->index);
			is_first = false;
		}
		else if (p->index == 0) {
			is_negative ? printf("%d", p->coefficient) : printf("+%d",p->coefficient);
		}
		else if (p->index == 1) {
			is_negative ? printf("%dX", p->coefficient) : printf("+%dX",p->coefficient);
		}
		else {
			is_negative ? printf("%dX^%d", p->coefficient, p->index) : printf("+%dX^%d",p->coefficient,p->index);
		}
		p = p->next;
	}
}

void Combine2List(node* pa, node* pb) {//crucial part!!!
	node* q = pa,* p=pa->next,* tmp=NULL;
	while (pb != NULL) {//aim to print linklistA
		tmp = pb;
		if (p->index > pb->index) {
			if (p->next != NULL) {
				pb->next = p->next;
			}
			else pb->next = NULL;
			p->next = pb;
			q = p, p = pb;
		}
		else if (p->index < pb->index) {
			pb->next = p;
			q->next = pb;
			q = pb;
		}
		else {
			p->coefficient = p->coefficient + pb->coefficient;
			if (p != NULL)
				q = p, p = p->next;
		}
		pb = tmp->next;
		free(tmp);
	}
}

node* AddNode(node* p, int coefficient, int index) {
	node* pa = (node*)malloc(sizeof(node));
	pa->coefficient = coefficient;
	pa->index = index;
	pa->next = NULL;
	p->next = pa;
	return pa;
}

node* Create() {
	node* p = (node*)malloc(sizeof(node));
	p->next = NULL;
	return p;
}

int main() {
	node* ha = Create();
	node* hb = Create();
	node* pa = ha;
	while (1) {//创建A链表
		int coefficient = 0, index = 0;
		scanf("%d%d",&coefficient,&index);
		if (coefficient == 0 && index == 0) {
			break;
		}
		else if (coefficient == 0) {
			continue;
		}
		else {
			pa = AddNode(pa, coefficient, index);
		}
	}
	node* pb = hb;
	while (1) {//创建B链表
		int coefficient = 0, index = 0;
		scanf("%d%d", &coefficient, &index);
		if (coefficient == 0 && index == 0) {
			break;
		}
		else if (coefficient == 0) {
			continue;
		}
		else {
			pb = AddNode(pb, coefficient, index);
		}
	}
	Combine2List(ha,hb->next);
	Print(ha->next);
	return 0;
}
